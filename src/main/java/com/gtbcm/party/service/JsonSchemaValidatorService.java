package com.gtbcm.party.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.gtbcm.party.config.SchemaProperties;
import com.gtbcm.party.exception.JsonSchemaValidationException;
import com.networknt.schema.JsonSchema;
import com.networknt.schema.JsonSchemaFactory;
import com.networknt.schema.ValidationMessage;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.util.Set;
import java.util.stream.Collectors;

@Service
public class JsonSchemaValidatorService {

    private final JsonSchema schema;

    private static final String ADDITIONAL_PROPERTIES = "additionalProp1";
    private static final String SCHEMA_NOT_FOUND = "Schema file not found";

    public JsonSchemaValidatorService(SchemaProperties schemaProperties) throws Exception {
        var resource = new ClassPathResource(schemaProperties.counterpartySchemaPath());
        var schemaStream = resource.getInputStream();

        if (schemaStream == null) {
            throw new JsonSchemaValidationException(SCHEMA_NOT_FOUND);
        }

        var factory = JsonSchemaFactory.getInstance(com.networknt.schema.SpecVersion.VersionFlag.V7);
        schema = factory.getSchema(schemaStream);
    }

    public void schemaValidation(JsonNode jsonNode) throws JsonSchemaValidationException {
        removeAdditionalProp1(jsonNode);

        Set<ValidationMessage> errors = schema.validate(jsonNode);
        if (!errors.isEmpty()) {
            var errorMessages = errors.stream()
                    .map(ValidationMessage::getMessage)
                    .collect(Collectors.toList());
            throw new JsonSchemaValidationException(errorMessages);
        }
    }

    /**
     * "additionalProp1" is an empty property generated by Swagger-OpenAPI on "Try it out".
     * The validator is unable to parse this auto-generated field, thus being removed.
     *
     * @param node jsonNode from which the empty property needs to be removed.
     */
    private void removeAdditionalProp1(JsonNode node) {
        if (node == null) {
            return;
        }

        if (node.isObject()) {
            var objectNode = (ObjectNode) node;
            if (objectNode.has(ADDITIONAL_PROPERTIES)) {
                objectNode.remove(ADDITIONAL_PROPERTIES);
            }

            objectNode.fieldNames().forEachRemaining(fieldName -> {
                var childNode = objectNode.get(fieldName);
                removeAdditionalProp1(childNode);
            });
        } else if (node.isArray()) {
            for (var eachNode : node) {
                removeAdditionalProp1(eachNode);
            }
        }
    }
}
